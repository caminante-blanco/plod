use crate::theme::create_style;
use egui_ltreeview::TreeView;

#[derive(serde::Deserialize, serde::Serialize, Default)]
#[serde(default)]
pub struct PortfolioApp {}

impl PortfolioApp {
    /// Called once before the first frame.
    pub fn new(cc: &eframe::CreationContext<'_>) -> Self {
        // This is also where you can customize the look and feel of egui using
        // `cc.egui_ctx.set_visuals` and `cc.egui_ctx.set_fonts`.

        // Load previous app state (if any).
        // Note that you must enable the `persistence` feature for this to work.
        let style = create_style();
        cc.egui_ctx.set_style(style);

        if let Some(storage) = cc.storage {
            eframe::get_value(storage, eframe::APP_KEY).unwrap_or_default()
        }

        let mut app: Self = Default::default();

        app.tree = egui_ltreeview::TreeView::new(vec![
            (0, vec![]),
            (1, vec![0]),
            (2, vec![1]),
            (3, vec![0]),
            (4, vec![3]),
            (5, vec![3]),
        ]);

        app
    }
}

impl eframe::App for PortfolioApp {
    /// Called by the framework to save state before shutdown.
    fn save(&mut self, storage: &mut dyn eframe::Storage) {
        eframe::set_value(storage, eframe::APP_KEY, self);
    }

    /// Called each time the UI needs repainting, which may be many times per second.
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        egui::TopBottomPanel::bottom("status_bar").show(ctx, |ui| {
            ui.label("NORMAL");
        });

        egui::SidePanel::left("file_tree").show(ctx, |ui| {
            ui.heading("~/website");
            ui.label("blog/test.md");
            ui.label("blog/test2.md");
        });

        egui::CentralPanel::default().show(ctx, |ui| {
            ui.heading("Welcome to Plod");
            ui.label("Central panel test");
        });
    }
}

fn powered_by_egui_and_eframe(ui: &mut egui::Ui) {
    ui.horizontal(|ui| {
        ui.spacing_mut().item_spacing.x = 0.0;
        ui.label("Powered by ");
        ui.hyperlink_to("egui", "https://github.com/emilk/egui");
        ui.label(" and ");
        ui.hyperlink_to(
            "eframe",
            "https://github.com/emilk/egui/tree/master/crates/eframe",
        );
        ui.label(".");
    });
}
